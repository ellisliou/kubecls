import base64

global map_table, ignore_table, ch5_policy, ch1, ch2, ch3

def getPolicy(base64Input):
	if(base64Input=="map_table"):
		return base64.b64decode(map_table)
	elif(base64Input=="ignore_table"):
		return base64.b64decode(ignore_table)
	elif(base64Input=="outputV1_table"):
		return base64.b64decode(outputV1_table)
	elif(base64Input=="ch5_policy"):
		return base64.b64decode(ch5_policy)
	elif(base64Input=="ch1"):
		return base64.b64decode(ch1)
	elif(base64Input=="ch2"):
		return base64.b64decode(ch2)
	elif(base64Input=="ch3"):
		return base64.b64decode(ch3)

outputV1_table="IjIuMiI6ICIyLjEiCiIyLjMiOiAiMi4yIgoiMi40IjogIjIuMyIKIjIuNSI6ICIyLjQiCiIyLjYiOiAiMi41IgoiNC43IjogIjQuNCIKIjQuOCI6ICI0LjUiCiI0LjExIjogIjQuNiIKIjQuMTMiOiAiNC43Igo="

map_table="MS4xLjE6IDQuOAoxLjEuMjogNC44CjEuMS4zOiA0LjgKMS4xLjQ6IDQuOAoxLjEuNTogMi42CjEuMS42OiA0LjgKMS4xLjc6IDQuOAoxLjEuODogNC44CjEuMS45OiAyLjYKMS4xLjEwOiAyLjIKMS4xLjExOiAyLjYKMS4xLjEyOiAyLjIKMS4xLjEzOiAyLjYKMS4xLjE0OiAyLjIKMS4xLjE1OiAyLjYKMS4xLjE2OiAyLjIKMS4xLjE3OiAyLjYKMS4xLjE4OiAyLjIKMS4xLjE5OiAyLjIKMS4xLjIwOiAyLjYKMS4xLjIxOiAyLjYKMS4yLjE6IDEuMgoxLjIuMjogMS4xCjEuMi4zOiAyLjUKMS4yLjQ6IDIuNQoxLjIuNTogMi41CjEuMi42OiAxLjEKMS4yLjc6IDEuMQoxLjIuODogMS4xCjEuMi45OiA1LjEKMS4yLjEwOiAxLjQKMS4yLjExOiAxLjYKMS4yLjEyOiAxLjYKMS4yLjEzOiAxLjYKMS4yLjE0OiAxLjYKMS4yLjE1OiAxLjYKMS4yLjE2OiAxLjYKMS4yLjE3OiAxLjYKMS4yLjE4OiAxLjYKMS4yLjE5OiAxLjYKMS4yLjIwOiAxLjYKMS4yLjIxOiAyLjQKMS4yLjIyOiA0LjExCjEuMi4yMzogNC4xMQoxLjIuMjQ6IDQuMTEKMS4yLjI1OiAxLjUKMS4yLjI2OiAxLjcKMS4yLjI3OiAxLjcKMS4yLjI4OiAxLjcKMS4yLjI5OiAyLjUKMS4yLjMwOiAyLjUKMS4yLjMxOiAxLjcKMS4yLjMyOiAxLjMKMS4yLjMzOiAxLjcKMS4yLjM0OiAxLjMKMS4zLjE6IDQuNwoxLjMuMjogNC43CjEuMy4zOiAxLjEKMS4zLjQ6IDYuMQoxLjMuNTogNC4yCjEuMy42OiA0LjIKMS4zLjc6IDQuNwoxLjQuMTogNC43CjEuNC4yOiA0LjcKMi4xOiAxLjcKMi4yOiAxLjcKMi4zOiAyLjUKMi40OiAxLjcKMi41OiAxLjcKMi42OiAyLjUKMi43OiAxLjcKMy4xLjE6IDQuMgozLjIuMTogMy4xCjMuMi4yOiAzLjEKNS4xLjE6IDYuMQo1LjEuMjogNi4yCjUuMS4zOiA2LjEKNS4xLjQ6IDYuMQo1LjEuNTogNC43CjUuMS42OiAxLjEKNS4xLjc6IDYuMQo1LjEuODogNi4xCjUuMi4xOiA2LjEKNS4yLjI6IDYuMQo1LjIuMzogNi4xCjUuMi40OiA2LjEKNS4yLjU6IDYuMQo1LjIuNjogNi4yCjUuMi43OiA2LjIKNS4yLjg6IDYuMgo1LjIuOTogNi4yCjUuMy4xOiA0LjEzCjUuMy4yOiA0LjEzCjUuNC4xOiA0LjQKNS40LjI6IDQuNAo1LjUuMTogNC43CjUuNy4xOiA0LjcKNS43LjI6IDQuNwo1LjcuMzogNi4xCjUuNy40OiA2LjE="

ignore_table="MS4zLjM6IDEuMQo1LjEuNjogMS4xCjEuMi4xMTogMS42CjEuMi4xMjogMS42CjEuMi4xNTogMS42CjEuMi4xODogMS42CjEuMi4yMDogMS42CjEuMi4zMzogMS43CiIyLjEiOiAxLjcKIjIuMiI6IDEuNwoiMi40IjogMS43CiIyLjUiOiAxLjcKIjIuNyI6IDEuNwoxLjEuMTI6IDIuMgoxLjIuNTogMi41CjEuMS45OiAyLjYKMS4zLjU6IDQuMgozLjEuMTogNC4yCjMuMi4yOiAzLjEK"

ch5_policy=""

ch1=""

ch2="LS0tCmNvbnRyb2xzOgp2ZXJzaW9uOiAiY2lzLTEuMjAiCmlkOiAyCnRleHQ6ICJFdGNkIE5vZGUgQ29uZmlndXJhdGlvbiIKdHlwZTogImV0Y2QiCmdyb3VwczoKICAtIGlkOiAyCiAgICB0ZXh0OiAiRXRjZCBOb2RlIENvbmZpZ3VyYXRpb24gRmlsZXMiCiAgICBjaGVja3M6CiAgICAgIC0gaWQ6IDIuMQogICAgICAgIHRleHQ6ICJFbnN1cmUgdGhhdCB0aGUgLS1jZXJ0LWZpbGUgYW5kIC0ta2V5LWZpbGUgYXJndW1lbnRzIGFyZSBzZXQgYXMgYXBwcm9wcmlhdGUgKEF1dG9tYXRlZCkiCiAgICAgICAgYXVkaXQ6ICIvYmluL3BzIC1lZiB8IC9iaW4vZ3JlcCBldGNkIHwgL2Jpbi9ncmVwIC12IGdyZXAiCiAgICAgICAgdGVzdHM6CiAgICAgICAgICBiaW5fb3A6IGFuZAogICAgICAgICAgdGVzdF9pdGVtczoKICAgICAgICAgICAgLSBmbGFnOiAiLS1jZXJ0LWZpbGUiCiAgICAgICAgICAgICAgZW52OiAiRVRDRF9DRVJUX0ZJTEUiCiAgICAgICAgICAgIC0gZmxhZzogIi0ta2V5LWZpbGUiCiAgICAgICAgICAgICAgZW52OiAiRVRDRF9LRVlfRklMRSIKICAgICAgICByZW1lZGlhdGlvbjogfAogICAgICAgICAgRm9sbG93IHRoZSBldGNkIHNlcnZpY2UgZG9jdW1lbnRhdGlvbiBhbmQgY29uZmlndXJlIFRMUyBlbmNyeXB0aW9uLgogICAgICAgICAgVGhlbiwgZWRpdCB0aGUgZXRjZCBwb2Qgc3BlY2lmaWNhdGlvbiBmaWxlIC9ldGMva3ViZXJuZXRlcy9tYW5pZmVzdHMvZXRjZC55YW1sCiAgICAgICAgICBvbiB0aGUgbWFzdGVyIG5vZGUgYW5kIHNldCB0aGUgYmVsb3cgcGFyYW1ldGVycy4KICAgICAgICAgIC0tY2VydC1maWxlPTwvcGF0aC90by9jYS1maWxlPgogICAgICAgICAgLS1rZXktZmlsZT08L3BhdGgvdG8va2V5LWZpbGU+CiAgICAgICAgc2NvcmVkOiB0cnVlCgogICAgICAtIGlkOiAyLjIKICAgICAgICB0ZXh0OiAiRW5zdXJlIHRoYXQgdGhlIC0tY2xpZW50LWNlcnQtYXV0aCBhcmd1bWVudCBpcyBzZXQgdG8gdHJ1ZSAoQXV0b21hdGVkKSIKICAgICAgICBhdWRpdDogIi9iaW4vcHMgLWVmIHwgL2Jpbi9ncmVwIGV0Y2QgfCAvYmluL2dyZXAgLXYgZ3JlcCIKICAgICAgICB0ZXN0czoKICAgICAgICAgIHRlc3RfaXRlbXM6CiAgICAgICAgICAgIC0gZmxhZzogIi0tY2xpZW50LWNlcnQtYXV0aCIKICAgICAgICAgICAgICBlbnY6ICJFVENEX0NMSUVOVF9DRVJUX0FVVEgiCiAgICAgICAgICAgICAgY29tcGFyZToKICAgICAgICAgICAgICAgIG9wOiBlcQogICAgICAgICAgICAgICAgdmFsdWU6IHRydWUKICAgICAgICByZW1lZGlhdGlvbjogfAogICAgICAgICAgRWRpdCB0aGUgZXRjZCBwb2Qgc3BlY2lmaWNhdGlvbiBmaWxlICRldGNkY29uZiBvbiB0aGUgbWFzdGVyCiAgICAgICAgICBub2RlIGFuZCBzZXQgdGhlIGJlbG93IHBhcmFtZXRlci4KICAgICAgICAgIC0tY2xpZW50LWNlcnQtYXV0aD0idHJ1ZSIKICAgICAgICBzY29yZWQ6IHRydWUKCiAgICAgIC0gaWQ6IDIuMwogICAgICAgIHRleHQ6ICJFbnN1cmUgdGhhdCB0aGUgLS1hdXRvLXRscyBhcmd1bWVudCBpcyBub3Qgc2V0IHRvIHRydWUgKEF1dG9tYXRlZCkiCiAgICAgICAgYXVkaXQ6ICIvYmluL3BzIC1lZiB8IC9iaW4vZ3JlcCBldGNkIHwgL2Jpbi9ncmVwIC12IGdyZXAiCiAgICAgICAgdGVzdHM6CiAgICAgICAgICBiaW5fb3A6IG9yCiAgICAgICAgICB0ZXN0X2l0ZW1zOgogICAgICAgICAgICAtIGZsYWc6ICItLWF1dG8tdGxzIgogICAgICAgICAgICAgIGVudjogIkVUQ0RfQVVUT19UTFMiCiAgICAgICAgICAgICAgc2V0OiBmYWxzZQogICAgICAgICAgICAtIGZsYWc6ICItLWF1dG8tdGxzIgogICAgICAgICAgICAgIGVudjogIkVUQ0RfQVVUT19UTFMiCiAgICAgICAgICAgICAgY29tcGFyZToKICAgICAgICAgICAgICAgIG9wOiBlcQogICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlCiAgICAgICAgcmVtZWRpYXRpb246IHwKICAgICAgICAgIEVkaXQgdGhlIGV0Y2QgcG9kIHNwZWNpZmljYXRpb24gZmlsZSAkZXRjZGNvbmYgb24gdGhlIG1hc3RlcgogICAgICAgICAgbm9kZSBhbmQgZWl0aGVyIHJlbW92ZSB0aGUgLS1hdXRvLXRscyBwYXJhbWV0ZXIgb3Igc2V0IGl0IHRvIGZhbHNlLgogICAgICAgICAgICAtLWF1dG8tdGxzPWZhbHNlCiAgICAgICAgc2NvcmVkOiB0cnVlCgogICAgICAtIGlkOiAyLjQKICAgICAgICB0ZXh0OiAiRW5zdXJlIHRoYXQgdGhlIC0tcGVlci1jZXJ0LWZpbGUgYW5kIC0tcGVlci1rZXktZmlsZSBhcmd1bWVudHMgYXJlCiAgICAgICAgc2V0IGFzIGFwcHJvcHJpYXRlIChBdXRvbWF0ZWQpIgogICAgICAgIGF1ZGl0OiAiL2Jpbi9wcyAtZWYgfCAvYmluL2dyZXAgZXRjZCB8IC9iaW4vZ3JlcCAtdiBncmVwIgogICAgICAgIHRlc3RzOgogICAgICAgICAgYmluX29wOiBhbmQKICAgICAgICAgIHRlc3RfaXRlbXM6CiAgICAgICAgICAgIC0gZmxhZzogIi0tcGVlci1jZXJ0LWZpbGUiCiAgICAgICAgICAgICAgZW52OiAiRVRDRF9QRUVSX0NFUlRfRklMRSIKICAgICAgICAgICAgLSBmbGFnOiAiLS1wZWVyLWtleS1maWxlIgogICAgICAgICAgICAgIGVudjogIkVUQ0RfUEVFUl9LRVlfRklMRSIKICAgICAgICByZW1lZGlhdGlvbjogfAogICAgICAgICAgRm9sbG93IHRoZSBldGNkIHNlcnZpY2UgZG9jdW1lbnRhdGlvbiBhbmQgY29uZmlndXJlIHBlZXIgVExTIGVuY3J5cHRpb24gYXMgYXBwcm9wcmlhdGUKICAgICAgICAgIGZvciB5b3VyIGV0Y2QgY2x1c3Rlci4KICAgICAgICAgIFRoZW4sIGVkaXQgdGhlIGV0Y2QgcG9kIHNwZWNpZmljYXRpb24gZmlsZSAkZXRjZGNvbmYgb24gdGhlCiAgICAgICAgICBtYXN0ZXIgbm9kZSBhbmQgc2V0IHRoZSBiZWxvdyBwYXJhbWV0ZXJzLgogICAgICAgICAgLS1wZWVyLWNsaWVudC1maWxlPTwvcGF0aC90by9wZWVyLWNlcnQtZmlsZT4KICAgICAgICAgIC0tcGVlci1rZXktZmlsZT08L3BhdGgvdG8vcGVlci1rZXktZmlsZT4KICAgICAgICBzY29yZWQ6IHRydWUKCiAgICAgIC0gaWQ6IDIuNQogICAgICAgIHRleHQ6ICJFbnN1cmUgdGhhdCB0aGUgLS1wZWVyLWNsaWVudC1jZXJ0LWF1dGggYXJndW1lbnQgaXMgc2V0IHRvIHRydWUgKEF1dG9tYXRlZCkiCiAgICAgICAgYXVkaXQ6ICIvYmluL3BzIC1lZiB8IC9iaW4vZ3JlcCBldGNkIHwgL2Jpbi9ncmVwIC12IGdyZXAiCiAgICAgICAgdGVzdHM6CiAgICAgICAgICB0ZXN0X2l0ZW1zOgogICAgICAgICAgICAtIGZsYWc6ICItLXBlZXItY2xpZW50LWNlcnQtYXV0aCIKICAgICAgICAgICAgICBlbnY6ICJFVENEX1BFRVJfQ0xJRU5UX0NFUlRfQVVUSCIKICAgICAgICAgICAgICBjb21wYXJlOgogICAgICAgICAgICAgICAgb3A6IGVxCiAgICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZQogICAgICAgIHJlbWVkaWF0aW9uOiB8CiAgICAgICAgICBFZGl0IHRoZSBldGNkIHBvZCBzcGVjaWZpY2F0aW9uIGZpbGUgJGV0Y2Rjb25mIG9uIHRoZSBtYXN0ZXIKICAgICAgICAgIG5vZGUgYW5kIHNldCB0aGUgYmVsb3cgcGFyYW1ldGVyLgogICAgICAgICAgLS1wZWVyLWNsaWVudC1jZXJ0LWF1dGg9dHJ1ZQogICAgICAgIHNjb3JlZDogdHJ1ZQoKICAgICAgLSBpZDogMi42CiAgICAgICAgdGV4dDogIkVuc3VyZSB0aGF0IHRoZSAtLXBlZXItYXV0by10bHMgYXJndW1lbnQgaXMgbm90IHNldCB0byB0cnVlIChBdXRvbWF0ZWQpIgogICAgICAgIGF1ZGl0OiAiL2Jpbi9wcyAtZWYgfCAvYmluL2dyZXAgZXRjZCB8IC9iaW4vZ3JlcCAtdiBncmVwIgogICAgICAgIHRlc3RzOgogICAgICAgICAgYmluX29wOiBvcgogICAgICAgICAgdGVzdF9pdGVtczoKICAgICAgICAgICAgLSBmbGFnOiAiLS1wZWVyLWF1dG8tdGxzIgogICAgICAgICAgICAgIGVudjogIkVUQ0RfUEVFUl9BVVRPX1RMUyIKICAgICAgICAgICAgICBzZXQ6IGZhbHNlCiAgICAgICAgICAgIC0gZmxhZzogIi0tcGVlci1hdXRvLXRscyIKICAgICAgICAgICAgICBlbnY6ICJFVENEX1BFRVJfQVVUT19UTFMiCiAgICAgICAgICAgICAgY29tcGFyZToKICAgICAgICAgICAgICAgIG9wOiBlcQogICAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlCiAgICAgICAgcmVtZWRpYXRpb246IHwKICAgICAgICAgIEVkaXQgdGhlIGV0Y2QgcG9kIHNwZWNpZmljYXRpb24gZmlsZSAkZXRjZGNvbmYgb24gdGhlIG1hc3RlcgogICAgICAgICAgbm9kZSBhbmQgZWl0aGVyIHJlbW92ZSB0aGUgLS1wZWVyLWF1dG8tdGxzIHBhcmFtZXRlciBvciBzZXQgaXQgdG8gZmFsc2UuCiAgICAgICAgICAtLXBlZXItYXV0by10bHM9ZmFsc2UKICAgICAgICBzY29yZWQ6IHRydWUKCiAgICAgIC0gaWQ6IDIuNwogICAgICAgIHRleHQ6ICJFbnN1cmUgdGhhdCBhIHVuaXF1ZSBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgaXMgdXNlZCBmb3IgZXRjZCAoTWFudWFsKSIKICAgICAgICBhdWRpdDogIi9iaW4vcHMgLWVmIHwgL2Jpbi9ncmVwIGV0Y2QgfCAvYmluL2dyZXAgLXYgZ3JlcCIKICAgICAgICB0ZXN0czoKICAgICAgICAgIHRlc3RfaXRlbXM6CiAgICAgICAgICAgIC0gZmxhZzogIi0tdHJ1c3RlZC1jYS1maWxlIgogICAgICAgICAgICAgIGVudjogIkVUQ0RfVFJVU1RFRF9DQV9GSUxFIgogICAgICAgIHJlbWVkaWF0aW9uOiB8CiAgICAgICAgICBbTWFudWFsIHRlc3RdCiAgICAgICAgICBGb2xsb3cgdGhlIGV0Y2QgZG9jdW1lbnRhdGlvbiBhbmQgY3JlYXRlIGEgZGVkaWNhdGVkIGNlcnRpZmljYXRlIGF1dGhvcml0eSBzZXR1cCBmb3IgdGhlCiAgICAgICAgICBldGNkIHNlcnZpY2UuCiAgICAgICAgICBUaGVuLCBlZGl0IHRoZSBldGNkIHBvZCBzcGVjaWZpY2F0aW9uIGZpbGUgJGV0Y2Rjb25mIG9uIHRoZQogICAgICAgICAgbWFzdGVyIG5vZGUgYW5kIHNldCB0aGUgYmVsb3cgcGFyYW1ldGVyLgogICAgICAgICAgLS10cnVzdGVkLWNhLWZpbGU9PC9wYXRoL3RvL2NhLWZpbGU+CiAgICAgICAgc2NvcmVkOiBmYWxzZQo="

ch3="LS0tCmNvbnRyb2xzOgp2ZXJzaW9uOiAiY2lzLTEuMjAiCmlkOiAzCnRleHQ6ICJDb250cm9sIFBsYW5lIENvbmZpZ3VyYXRpb24iCnR5cGU6ICJjb250cm9scGxhbmUiCmdyb3VwczoKICAtIGlkOiAzLjEKICAgIHRleHQ6ICJBdXRoZW50aWNhdGlvbiBhbmQgQXV0aG9yaXphdGlvbiIKICAgIGNoZWNrczoKICAgICAgLSBpZDogMy4xLjEKICAgICAgICB0ZXh0OiAiQ2xpZW50IGNlcnRpZmljYXRlIGF1dGhlbnRpY2F0aW9uIHNob3VsZCBub3QgYmUgdXNlZCBmb3IgdXNlcnMgKE1hbnVhbCkiCiAgICAgICAgdHlwZTogIm1hbnVhbCIKICAgICAgICByZW1lZGlhdGlvbjogfAogICAgICAgICAgQWx0ZXJuYXRpdmUgbWVjaGFuaXNtcyBwcm92aWRlZCBieSBLdWJlcm5ldGVzIHN1Y2ggYXMgdGhlIHVzZSBvZiBPSURDIHNob3VsZCBiZQogICAgICAgICAgaW1wbGVtZW50ZWQgaW4gcGxhY2Ugb2YgY2xpZW50IGNlcnRpZmljYXRlcy4KICAgICAgICBzY29yZWQ6IGZhbHNlCgogIC0gaWQ6IDMuMgogICAgdGV4dDogIkxvZ2dpbmciCiAgICBjaGVja3M6CiAgICAgIC0gaWQ6IDMuMi4xCiAgICAgICAgdGV4dDogIkVuc3VyZSB0aGF0IGEgbWluaW1hbCBhdWRpdCBwb2xpY3kgaXMgY3JlYXRlZCAoTWFudWFsKSIKICAgICAgICBhdWRpdDogIi9iaW4vcHMgLWVmIHwgZ3JlcCBrdWJlLWFwaXNlcnZlciB8IGdyZXAgLXYgZ3JlcCIKICAgICAgICB0ZXN0czoKICAgICAgICAgIHRlc3RfaXRlbXM6CiAgICAgICAgICAgIC0gZmxhZzogIi0tYXVkaXQtcG9saWN5LWZpbGUiCiAgICAgICAgICAgICAgc2V0OiB0cnVlCiAgICAgICAgcmVtZWRpYXRpb246IHwKICAgICAgICAgIENyZWF0ZSBhbiBhdWRpdCBwb2xpY3kgZmlsZSBmb3IgeW91ciBjbHVzdGVyLgogICAgICAgIHNjb3JlZDogZmFsc2UKCiAgICAgIC0gaWQ6IDMuMi4yCiAgICAgICAgdGV4dDogIkVuc3VyZSB0aGF0IHRoZSBhdWRpdCBwb2xpY3kgY292ZXJzIGtleSBzZWN1cml0eSBjb25jZXJucyAoTWFudWFsKSIKICAgICAgICB0eXBlOiAibWFudWFsIgogICAgICAgIHJlbWVkaWF0aW9uOiB8CiAgICAgICAgICBDb25zaWRlciBtb2RpZmljYXRpb24gb2YgdGhlIGF1ZGl0IHBvbGljeSBpbiB1c2Ugb24gdGhlIGNsdXN0ZXIgdG8gaW5jbHVkZSB0aGVzZSBpdGVtcywgYXQgYQogICAgICAgICAgbWluaW11bS4KICAgICAgICBzY29yZWQ6IGZhbHNlCg=="