---
controls:
version: "cis-1.20"
id: 5
text: "Kubernetes Policies"
type: "policies"
groups:
  - id: 5.1
    text: "RBAC and Service Accounts"
    checks:
      - id: 5.1.1
        text: "Ensure that the cluster-admin role is only used where required (Manual)"
        type: "manual"
        audit: echo "User_Name clusterRole_Name SUBJECT";kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name|grep cluster-admin| sed 's/[ ]\+/ /g'
        remediation: |
          Identify all clusterrolebindings to the cluster-admin role. Check if they are used and
          if they need this role or if they could use a role with fewer privileges.
          Where possible, first bind users to a lower privileged role and then remove the
          clusterrolebinding to the cluster-admin role :
          kubectl delete clusterrolebinding [name]
        scored: false

      - id: 5.1.2
        text: "Minimize access to secrets (Manual)"
        type: "manual"
        audit_function: "secret_check"
        compareStr: "secrets"
        comareItem: "resources"
        remediation: |
          Where possible, remove get, list and watch access to secret objects in the cluster.
        scored: false

      - id: 5.1.3
        text: "Minimize wildcard use in Roles and ClusterRoles (Manual)"
        type: "manual"
        audit_function: "secret_check"
        compareStr: "*"
        comareItem: "verbs"
        remediation: |
          Where possible replace any use of wildcards in clusterroles and roles with specific
          objects or actions.
        scored: false

      - id: 5.1.4
        text: "Minimize access to create pods (Manual)"
        type: "manual"
        audit_function: "twoItem_check"
        compareStr: "pods"
        comareItem: "resources"
        compareStr2: "create"
        comareItem2: "verbs"
        remediation: |
          Where possible, remove create access to pod objects in the cluster.
        scored: false

      - id: 5.1.5
        text: "Ensure that default service accounts are not actively used. (Manual)"
        type: "manual"
        audit_function: "serviceaccounts"
        audit_name: "default"
        remediation: |
          Create explicit service accounts wherever a Kubernetes workload requires specific access
          to the Kubernetes API server.
          Modify the configuration of each default service account to include this value
          automountServiceAccountToken: false
        scored: false

      - id: 5.1.6
        text: "Ensure that Service Account Tokens are only mounted where necessary (Manual)"
        type: "manual"
        audit_function: "automountServiceAccountToken"
        remediation: |
          Modify the definition of pods and service accounts which do not need to mount service
          account tokens to disable it.
        scored: false

      - id: 5.1.7
        text: "Avoid use of system:masters group (Manual)"
        type: "manual"
        audit: echo "User_Name clusterRole_Name SUBJECT";kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name|grep system:masters| sed 's/[ ]\+/ /g'
        remediation: |
          Remove the system:masters group from all users in the cluster.
        scored: false

      - id: 5.1.8
        text: "Limit use of the Bind, Impersonate and Escalate permissions in the Kubernetes cluster (Manual)"
        type: "manual"
        audit_function: "secret_check"
        compareStr: "impersonate/bind/escalate"
        comareItem: "verbs"
        remediation: |
          Where possible, remove the impersonate, bind and escalate rights from subjects.
        scored: false

  - id: 5.2
    text: "Pod Security Policies"
    checks:
      - id: 5.2.1
        text: "Minimize the admission of privileged containers (Automated)"
        type: "manual"
        audit_function: 'pspcheck'
        compareStr: 'privileged'
        remediation: |
          Create a PSP as described in the Kubernetes documentation, ensuring that
          the .spec.privileged field is omitted or set to false.
        scored: false

      - id: 5.2.2
        text: "Minimize the admission of containers wishing to share the host process ID namespace (Automated)"
        type: "manual"
        audit_function: 'pspcheck'
        compareStr: 'hostPID'
        remediation: |
          Create a PSP as described in the Kubernetes documentation, ensuring that the
          .spec.hostPID field is omitted or set to false.
        scored: false

      - id: 5.2.3
        text: "Minimize the admission of containers wishing to share the host IPC namespace (Automated)"
        type: "manual"
        audit_function: 'pspcheck'
        compareStr: 'hostIPC'
        remediation: |
          Create a PSP as described in the Kubernetes documentation, ensuring that the
          .spec.hostIPC field is omitted or set to false.
        scored: false

      - id: 5.2.4
        text: "Minimize the admission of containers wishing to share the host network namespace (Automated)"
        type: "manual"
        audit_function: 'pspcheck'
        compareStr: 'hostNetwork'
        remediation: |
          Create a PSP as described in the Kubernetes documentation, ensuring that the
          .spec.hostNetwork field is omitted or set to false.
        scored: false

      - id: 5.2.5
        text: "Minimize the admission of containers with allowPrivilegeEscalation (Automated)"
        type: "manual"
        audit_function: 'pspcheck'
        compareStr: 'allowPrivilegeEscalation'
        remediation: |
          Create a PSP as described in the Kubernetes documentation, ensuring that the
          .spec.allowPrivilegeEscalation field is omitted or set to false.
        scored: false

      - id: 5.2.6
        text: "Minimize the admission of root containers (Automated)"
        type: "manual"
        audit_function: 'pspcheck'
        compareStr: 'runAsUser'
        remediation: |
          Create a PSP as described in the Kubernetes documentation, ensuring that the
          .spec.runAsUser.rule is set to either MustRunAsNonRoot or MustRunAs with the range of
          UIDs not including 0.
        scored: false

      - id: 5.2.7
        text: "Minimize the admission of containers with the NET_RAW capability (Automated)"
        type: "manual"
        audit_function: 'pspcheck'
        compareStr: 'requiredDropCapabilities'
        remediation: |
          Create a PSP as described in the Kubernetes documentation, ensuring that the
          .spec.requiredDropCapabilities is set to include either NET_RAW or ALL.
        scored: false

      - id: 5.2.8
        text: "Minimize the admission of containers with added capabilities (Automated)"
        type: "manual"
        audit_function: 'pspcheck'
        compareStr: 'allowedCapabilities'
        remediation: |
          Ensure that allowedCapabilities is not present in PSPs for the cluster unless
          it is set to an empty array.
        scored: false

      - id: 5.2.9
        text: "Minimize the admission of containers with capabilities assigned (Manual)"
        type: "manual"
        audit_function: 'pspcheck'
        compareStr: 'requiredDropCapabilities'
        remediation: |
          Review the use of capabilites in applications running on your cluster. Where a namespace
          contains applicaions which do not require any Linux capabities to operate consider adding
          a PSP which forbids the admission of containers which do not drop all capabilities.
        scored: false

  - id: 5.3
    text: "Network Policies and CNI"
    checks:
      - id: 5.3.1
        text: "Ensure that the CNI in use supports Network Policies (Manual)"
        type: "manual"
        remediation: |
          If the CNI plugin in use does not support network policies, consideration should be given to
          making use of a different plugin, or finding an alternate mechanism for restricting traffic
          in the Kubernetes cluster.
        scored: false

      - id: 5.3.2
        text: "Ensure that all Namespaces have Network Policies defined (Manual)"
        type: "manual"
        audit: 'kubectl get networkpolicy -A -o=custom-columns=Networkpolicy_Name:.metadata.name;kubectl get namespaces'
        remediation: |
          Follow the documentation and create NetworkPolicy objects as you need them.
        scored: false

  - id: 5.4
    text: "Secrets Management"
    checks:
      - id: 5.4.1
        text: "Prefer using secrets as files over secrets as environment variables (Manual)"
        type: "manual"
        audit: echo "secretKeyRef list";kubectl get all -o jsonpath='{range .items[?(@..secretKeyRef)]} {.kind} {.metadata.name} {"\n"}{end}' -A
        remediation: |
          if possible, rewrite application code to read secrets from mounted secret files, rather than
          from environment variables.
        scored: false

      - id: 5.4.2
        text: "Consider external secret storage (Manual)"
        type: "manual"
        remediation: |
          Refer to the secrets management options offered by your cloud provider or a third-party
          secrets management solution.
        scored: false

  - id: 5.5
    text: "Extensible Admission Control"
    checks:
      - id: 5.5.1
        text: "Configure Image Provenance using ImagePolicyWebhook admission controller (Manual)"
        type: "manual"
        audit_function: 'apicheck'
        compareStr: 'admission-control-config-file'
        remediation: |
          Follow the Kubernetes documentation and setup image provenance.
        scored: false

  - id: 5.7
    text: "General Policies"
    checks:
      - id: 5.7.1
        text: "Create administrative boundaries between resources using namespaces (Manual)"
        type: "manual"
        audit: kubectl get namespaces
        remediation: |
          Follow the documentation and create namespaces for objects in your deployment as you need
          them.
        scored: false

      - id: 5.7.2
        text: "Ensure that the seccomp profile is set to docker/default in your pod definitions (Manual)"
        type: "manual"
        audit: echo "===pod list===";kubectl get pods -A;echo "===Enable seccompProfile list===";kubectl get pods -A -o jsonpath='{range .items[?(@..seccompProfile)]} {.kind} {.metadata.name} {"\n"}{end}'
        remediation: |
          Use security context to enable the docker/default seccomp profile in your pod definitions.
          An example is as below:
            securityContext:
              seccompProfile:
                type: RuntimeDefault
        scored: false

      - id: 5.7.3
        text: "Apply Security Context to Your Pods and Containers (Manual)"
        type: "manual"
        audit: echo "===pod list===";kubectl get pods -A;echo "===Enable Security Context list===";kubectl get pods -A -o=custom-columns=NAME:metadata.name,securityContext_name:.spec.containers[0].securityContext
        remediation: |
          Follow the Kubernetes documentation and apply security contexts to your pods. For a
          suggested list of security contexts, you may refer to the CIS Security Benchmark for Docker
          Containers.
        scored: false

      - id: 5.7.4
        text: "The default namespace should not be used (Manual)"
        type: "manual"
        audit: kubectl get all
        remediation: |
          Ensure that namespaces are created to allow for appropriate segregation of Kubernetes
          resources and that all new resources are created in a specific namespace.
        scored: false
